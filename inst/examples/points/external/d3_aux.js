// Generated by CoffeeScript 1.4.0
(function() {

  this.my_light_red = "#b90000";

  this.append_main = function(opts) {
    var main, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
    if (opts == null) {
      opts = {};
    }
    if ((_ref = opts.element) == null) {
      opts.element = "svg:svg";
    }
    if ((_ref1 = opts.selector) == null) {
      opts.selector = "body";
    }
    if ((_ref2 = opts.background) == null) {
      opts.background = "#fff";
    }
    if ((_ref3 = opts.width) == null) {
      opts.width = 200;
    }
    if ((_ref4 = opts.height) == null) {
      opts.height = 200;
    }
    if ((_ref5 = opts.margin) == null) {
      opts.margin = 10;
    }
    if ((_ref6 = opts["class"]) == null) {
      opts["class"] = "main";
    }
    main = d3.select(opts.selector).append(opts.element).attr("width", opts.width).attr("height", opts.height).attr("class", opts["class"]).style("background", opts.background).style("margin", opts.margin);
    if (opts.id) {
      main.attr("id", opts.id);
    }
    if (opts["class"]) {
      main.attr("class", opts["class"]);
    }
    main.width = opts.width;
    main.height = opts.height;
    return main;
  };

  this.append_container = function(opts) {
    var container, _ref, _ref1;
    if (opts == null) {
      opts = {};
    }
    if ((_ref = opts.selector) == null) {
      opts.selector = "body";
    }
    if ((_ref1 = opts["class"]) == null) {
      opts["class"] = "container";
    }
    container = d3.select(opts.selector).append('div').attr("class", opts["class"]).style("overflow", "hidden");
    return container;
  };

  this.append_div = function(container, opts) {
    var div, _ref, _ref1;
    if (opts == null) {
      opts = {};
    }
    if ((_ref = opts.background) == null) {
      opts.background = my_light_red;
    }
    if ((_ref1 = opts.margin) == null) {
      opts.margin = 10;
    }
    div = d3.select(container.node()).append('div').style('background', opts.background).style('margin', opts.margin).style("float", "left");
    if (opts.id) {
      div.attr("id", opts.id);
    }
    if (opts["class"]) {
      div.attr("class", opts["class"]);
    }
    return div;
  };

  this.get_scales = function(width, height) {
    var scales;
    scales = {};
    scales.x = d3.scale.linear().domain([0, width]).range([0, width]);
    scales.y = d3.scale.linear().domain([0, height]).range([height, 0]);
    return scales;
  };

  this.append_plot = function(opts) {
    var plot, _ref, _ref1, _ref2, _ref3, _ref4;
    if (opts == null) {
      opts = {};
    }
    if ((_ref = opts.margin) == null) {
      opts.margin = {
        top: 20,
        right: 150,
        bottom: 30,
        left: 50
      };
    }
    if ((_ref1 = opts.width) == null) {
      opts.width = 400;
    }
    if ((_ref2 = opts.height) == null) {
      opts.height = 400;
    }
    if ((_ref3 = opts.background) == null) {
      opts.background = "#fff";
    }
    if ((_ref4 = opts["class"]) == null) {
      opts["class"] = "plot";
    }
    opts.total_margin = d3.max([opts.margin.left + opts.margin.right, opts.margin.top + opts.margin.bottom]);
    opts.width = opts.width - opts.total_margin;
    opts.height = opts.height - opts.total_margin;
    plot = append_main({
      background: opts.background,
      id: opts.id,
      width: opts.width + opts.total_margin,
      height: opts.height + opts.total_margin,
      margin: 20
    });
    plot = plot.append("svg:g").attr("class", opts["class"]).attr("transform", "translate(" + opts.margin.left + "," + opts.margin.top + ")");
    plot.scales = get_scales(opts.width, opts.height);
    plot.margin = opts.margin;
    plot.width = opts.width;
    plot.height = opts.height;
    return plot;
  };

  this.draw_axes = function(plot, opts) {
    var x_axis, _ref, _ref1;
    if (opts == null) {
      opts = {};
    }
    if ((_ref = opts.orientation_x) == null) {
      opts.orientation_x = "bottom";
    }
    if ((_ref1 = opts.orientation_y) == null) {
      opts.orientation_y = "left";
    }
    plot.axes = {};
    plot.axes.x = d3.svg.axis().scale(plot.scales.x).orient(opts.orientation_x).tickSize(6, 0);
    plot.axes.y = d3.svg.axis().scale(plot.scales.y).orient(opts.orientation_y).tickSize(6, 0);
    x_axis = plot.append("g").attr("class", "x axis").attr("transform", "translate(0, " + plot.height + ")").call(plot.axes.x);
    plot.append("g").attr("class", "y axis").call(plot.axes.y);
    return plot;
  };

  this.parent_of = function(child) {
    return d3.select(child).node().parentNode;
  };

  this.add_scale_padding = function(scale, padding) {
    var range;
    if (padding == null) {
      padding = 20;
    }
    range = scale.range();
    if (range[0] > range[1]) {
      padding *= -1;
    }
    return scale.domain([range[0] - padding, range[1] + padding].map(scale.invert));
  };

}).call(this);
